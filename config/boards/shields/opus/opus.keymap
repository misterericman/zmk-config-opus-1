#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


#define DEFAULT 0
#define LOWR 1
#define RAIS 2
#define ADJS 3
#define GAME 4
#define GAMEF 5

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &kp TAB   &kp Q     &kp W    &kp F     &kp P     &kp K                                                 &kp J     &kp L     &kp U     &kp Y     &kp SEMI    &trans
&mt LCTRL ESC &kp A     &kp R    &kp S     &kp T     &kp G                                                 &kp M     &kp N     &kp E     &kp I     &kp O      &kp SQT
    &kp LSHFT &kp X  	&kp C    &kp V     &kp D     &kp Z                                                 &kp B     &kp H     &kp COMMA &kp DOT   &kp FSLH &mt LSHFT RET
                                 &lt LOWR BSPC  &kp LGUI  &mt LALT ESC               &kp C_MUTE          &mt LCTRL RET  &mo ADJS  &lt RAIS SPACE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower {
          bindings = <
    &kp TILDE &kp EXCL  &kp AT   &kp POUND &kp DLLR  &kp PRCNT                                             &kp CARET &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR &kp DEL
    &trans    &trans    &trans   &trans    &trans    &trans                                                &trans    &kp PLUS  &kp EQUAL &kp LBRC  &kp RBRC &kp PIPE
    &trans    &trans    &trans   &trans    &trans    &trans                                                &trans    &kp MINUS &kp UNDER &kp LBKT  &kp RBKT &mt LSHFT RET
                                 &trans    &trans    &trans               &kp C_PLAY_PAUSE                 &trans    &trans    &kp SPACE
            >;

            sensor-bindings = <&inc_dec_kp C_PREV C_NEXT>;
        };

        raise {
          bindings = <
    &kp GRAVE &kp EXCL  &kp AT   &kp POUND &kp DLLR  &kp PRCNT                                             &kp CARET &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR  &kp DEL
    &trans    &trans    &trans   &trans    &trans    &trans                                                &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &trans   &kp BSLH
    &trans    &trans    &trans   &trans    &trans    &trans                                                &kp HOME  &kp PG_DN &kp PG_UP &kp END   &trans   &trans
                                 &kp BSPC    &trans    &trans                &kp C_PLAY_PAUSE                &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_PREV C_NEXT>;
        };

        adjust {
          bindings = <
    &kp TILDE &kp EXCL  &kp AT   &kp POUND &kp DLLR  &kp PRCNT                                             &kp CARET &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR &tog GAME
    &trans    &kp N1    &kp N2   &kp N3    &kp N4    &kp N5                                                &kp N6    &kp N7    &kp N8    &kp N9    &kp N0   &trans
   &bt BT_PRV &trans    &trans   &trans    &trans    &trans                                                &trans    &trans    &trans    &trans    &trans   &bt BT_NXT
                                &out OUT_BLE   &out OUT_USB   &bt BT_CLR                   &kp X                   &bootloader   &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_PREV C_NEXT>;
        };


        game {
          bindings = <
    &kp ESC   &kp N1    &kp N2   &kp N3    &kp N4    &kp N5                                                &kp Y     &trans    &trans    &trans   &kp P    &tog GAME
    &kp TAB   &kp Q     &kp W    &kp E     &kp R     &kp T                                                 &trans    &trans    &trans    &trans   &trans   &trans
    &kp LSHFT &kp A     &kp S    &kp D     &kp F     &kp G                                                 &kp B    &trans    &trans    &trans    &trans   &trans
                                 &kp LCTRL &lt GAMEF SPACE &mt LALT V              &kp X                   &trans   &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_PREV C_NEXT>;
        };

        game_function {
          bindings = <
    &trans    &kp N6    &kp N7   &trans    &kp N6    &kp N7                                                &trans    &trans    &trans    &trans    &trans   &trans
    &trans    &kp F1    &kp F2   &kp F3    &kp F4    &trans                                                &trans    &trans    &trans    &trans    &trans   &trans
    &trans    &trans    &trans   &trans    &kp B     &kp B                                                 &trans    &trans    &trans    &trans    &trans   &trans
                                 &trans    &trans    &bt BT_CLR                   &kp X                   &trans   &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_PREV C_NEXT>;
        };
    };
}; 

/ {
    combos {
        compatible = "zmk,combos";
        combo_tilde {
            timeout-ms = <100>;
            key-positions = <1 2>;
            layers = <0>;
            bindings = <&kp TILDE>;
        };
        combo_minus {
            timeout-ms = <100>;
            key-positions = <19 20>;
            bindings = <&kp MINUS>;
        };
        combo_underscore {
            timeout-ms = <100>;
            key-positions = <31 32>;
            bindings = <&kp UNDER>;
        };
    };
};
